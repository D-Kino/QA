#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <signal.h>
#include "..\header\common.h"
#include "..\header\date.h"
#include "..\header\file.h"
#include "..\header\validation.h"

/* 定数の定義 */
const char USER_NAME[] = "QA";
const char PASSWORD[] = "qsATXjfZ";
const char CONNECT_STRING[] = "192.168.1.2/orcl";
const char OUTPUT_PATH[] = ".\\data\\";
const char SEPARATE_MSG[] = "----------------------------------------------------------------------------------------------\n";
const char DESTINATION_DIR[] = "/qa_system/data/";

/* 変数の定義 */
char output_file_path[256] = "";
FILE* fp;

/* メッセージの定義 */
const char INPUT_NAME_MSG[] = "名前を入力してください。\n";
const char RESULT_MSG[] = "【結果】\n";

/* 警告定数の定義 */
char WARNING_MSG_LIST[256][128];

/* エラー定数の定義 */
char ERROR_MSG_LIST[256][128];

/* 関数の宣言 */
void setMsg();
void procWarning(int);
void procError(int);


/* ホスト変数の宣言 */
EXEC SQL BEGIN DECLARE SECTION;
    varchar username[20];
    varchar password[20];
    varchar connect_string[56];
    int category_count[256];
    int h_id[256];
    char h_category[256][64];
    char h_question[256][256];
    char h_choice[256][256];
    char h_answer[256][2];
    int h_q_total[256];
    int h_correct_total[256];
    char subquery[256];
    char query[256];
    char category_query[256];
EXEC SQL END DECLARE SECTION;

EXEC SQL INCLUDE sqlca;

int main(argc, argv)
int argc;
char *argv[];
{
    int i = 0;
    int question_num = 0;	// 問題数
    int correct_answers_cnt = 0;	// 正解数
    char name[64];	// 名前
    char category[64];	// 問題のカテゴリ
    char kaito[3];	// ユーザの回答
    char kaito_msg[5];	// ユーザの回答（出力用）
    char correctness_ary[256][256]; // 正誤結果を格納
    char choice[4][64]; // 問題の選択肢
    char output_file_name[64]; // 出力ファイル名
	char convert_file_path[256];	// 文字コード変換後のファイルパス
    char start_msg[256];	// 問題の開始メッセージ
    char question_msg[256];	// 問題文
    char choice_msg[256];	// 選択メッセージ
    char result_detail_msg[256]; // 結果詳細メッセージ
    char result_kaito_msg[16];	// 回答結果メッセージ
    char destination_file_path[128]; // 送信先ファイルパス
    char question_no_str[16]; // 送信先ファイルパス
    double correct_rate = 0;

    /* メッセージ格納用配列にメッセージを格納 */
    setMsg();

    /* 引数チェック */
    if (argc != 3) {
    	procError(100);
    	return 100;
    }

    /* 入力チェック */
    /* 文字数チェック */
    if (validLength(argv[1], 0, 50)) {
    	procError(101);
    	return 101;
    }
    /* 数値チェック */
    if (validInt(argv[2])) {
    	procError(103);
    	return 103;
    }
    /* int型の範囲を超えたかをチェック */
    if (atoi(argv[2]) < 0) {
		procError(105);
    	return 105;
    }
    /* 数値大小チェック */
    switch (validSize(atoi(argv[2]), 1, 100)) {
    	case 1:
    		procError(104);
        	return 104;
        case 2:
			procError(105);
        	return 105;
    }

    /* 引数を変数に格納 */
    strcpy(category, argv[1]);
    question_num = atoi(argv[2]);

    /* 例外宣言 */
    EXEC SQL WHENEVER SQLERROR GOTO errorpt;

    /* Oracle接続 */
    strcpy(username.arr, USER_NAME);
    username.len=strlen(username.arr);
    strcpy(password.arr, PASSWORD);
    password.len=strlen(password.arr);
    strcpy(connect_string.arr, CONNECT_STRING);
    connect_string.len=strlen(connect_string.arr);
    EXEC SQL CONNECT :username IDENTIFIED BY :password USING :connect_string;

    /* カテゴリ存在チェック */
    sprintf(category_query, "SELECT COUNT(*) FROM question_answer WHERE category = '%s' AND ROWNUM <= %d", category);
    EXEC SQL PREPARE COUNT_CATEGORY_SQL1 FROM :category_query;
    EXEC SQL DECLARE COUNT_CATEGORY_CUR1 CURSOR FOR COUNT_CATEGORY_SQL1;
    EXEC SQL OPEN COUNT_CATEGORY_CUR1;
    EXEC SQL FETCH COUNT_CATEGORY_CUR1 INTO category_count;
    EXEC SQL CLOSE COUNT_CATEGORY_CUR1;
    if (category_count[0] < 1) {
    	procError(102);
    	return 102;
    }

    /* クエリ */
    strcpy(subquery, "SELECT DBMS_RANDOM.RANDOM() AS rand, question_answer.* FROM question_answer ORDER BY rand");
    sprintf(query, "SELECT id, category, question, choice, answer, q_total, correct_total FROM (%s) WHERE category = '%s' AND ROWNUM <= %d", subquery, category, question_num);

    /* 文字列queryを解析してSQL1という名前を指定する */
    EXEC SQL PREPARE SQL1 FROM :query;
    /* CUR1というカーソルをSQL1に関連付けをしている */
    EXEC SQL DECLARE CUR1 CURSOR FOR SQL1;
    /* Oracleカーソルを割り当て、入力ホスト変数にバインドし、問合せを実行します */
    EXEC SQL OPEN CUR1;
    /* 選択リスト内の列値をINTO句の対応するホスト変数に割り当てた後、カーソルを次の行に進める  */
    EXEC SQL FETCH CUR1 INTO h_id, h_category, h_question, h_choice,h_answer, h_q_total,h_correct_total;
    /* カーソルを使用禁止以降FETCHできない。 */
    EXEC SQL CLOSE CUR1;

    /* 問題数チェック */
    i = question_num - 1;
    if (h_id[i] == 0) {
		procWarning(1);
    	while(i > 0){
    		if (h_id[i] != 0) {
    			question_num = i + 1;
    			break;
    		}
    		i--;
    	}
    }

    /* テスト実行者の名前の入力を受け付ける。 */
    printf(INPUT_NAME_MSG);
    while (1) {
    	if (getsn(name, 64) == NULL) {
    		exit(0);
    	}
        strcpy(name, trim(name));

        /* 名前の文字数チェック */
        if (validLength(name, 0, 30)) {
        	procWarning(5);
        } else {
        	break;
        }
    }

    /* 現在の日時を取得 */
    char datetime[16];
    struct tm *local = getNowDateTime();
    sprintf(datetime, "%4d%02d%02d%02d%02d%02d", local->tm_year, local->tm_mon, local->tm_mday, local->tm_hour, local->tm_min, local->tm_sec);

    /* 出力ファイル */
    sprintf(output_file_name, "%s-%s-%s.txt", datetime, category, name);
    sprintf(output_file_path, "%s%s", OUTPUT_PATH, output_file_name);

    /* 出力先ディレクトリの作成 */
    _mkdir(OUTPUT_PATH);

    /* ファイルをオープンする */
	if ((fp = fopen(output_file_path, "w")) == NULL) {
		// ファイルオープンエラー
		procError(106);;
    	return 106;
	}

    /* 画面表示を消す（OS依存） */
    system("cls");

	/* 出題処理 */
    sprintf(start_msg, "*** %sに関する問題を%d問出題します。 ***\n", category, question_num);
    printf("%s", start_msg);
    if (fputs(start_msg , fp) == EOF) {
    	// ファイル書き込みエラー
		fclose(fp);
		deleteFile(output_file_path);
		procError(106);
		return 106;
    }
    for (i=0; i<question_num; i++) {
    	if (h_id[i] == 0) {
    		if (i == 0) {
    			procError(108);
    			return 108;
    		}
    		break;
    	}

        /* 出題 */
        sprintf(question_msg, "Q%d.%s\n", i+1, trim(h_question[i]));
        printf("%s", question_msg);
        if (fputs(question_msg , fp) == EOF) {
        	// ファイル書き込みエラー
    		fclose(fp);
    		deleteFile(output_file_path);
    		procError(106);
    		return 106;
        }
        sscanf(h_choice[i], "%[^,],%[^,],%[^,],%s", choice[0], choice[1], choice[2], choice[3]);
        sprintf(choice_msg, "%s %s %s %s\n", choice[0], choice[1], choice[2], choice[3]);
        printf(choice_msg);
        if (fputs(choice_msg , fp) == EOF) {
        	// ファイル書き込みエラー
    		fclose(fp);
    		deleteFile(output_file_path);
    		procError(106);
    		return 106;
        }

        /* 回答処理 */
        while (1) {
        	if (getsn(kaito, 3) == NULL) {
        		exit(0);
        	}
            if (strcmp(kaito, "A") == 0 || strcmp(kaito, "B") == 0  || strcmp(kaito, "C") == 0  || strcmp(kaito, "D") == 0) {
            	break;
            } else {
        		procWarning(2);
            }
        }
        sprintf(kaito_msg, "%s\n", kaito);
    	if (fputs(kaito_msg , fp) == EOF) {
    		// ファイル書き込みエラー
    		fclose(fp);
    		deleteFile(output_file_path);
    		procError(106);
    		return 106;
    	}

        /* 正誤判定 */
        if (strcmp(h_answer[i], kaito) == 0){
            strcpy(correctness_ary[i], "○");
            correct_answers_cnt++;

            /* データベース更新処理 */
            EXEC SQL UPDATE question_answer
                SET q_total = q_total + 1, correct_total = correct_total + 1
                WHERE id = :h_id[i];
        } else {
            strcpy(correctness_ary[i], "×");

            /* データベース更新処理 */
            EXEC SQL UPDATE question_answer
                SET q_total = q_total + 1
                WHERE id = :h_id[i];
        }

        printf("%s", SEPARATE_MSG);
        if (fputs(SEPARATE_MSG , fp) == EOF) {
        	// ファイル書き込みエラー
    		fclose(fp);
    		deleteFile(output_file_path);
    		procError(106);
    		return 106;
        }
    }

    /* 結果出力 */
	printf("%s", RESULT_MSG);
    if (fputs(RESULT_MSG , fp) == EOF) {
    	// ファイル書き込みエラー
		fclose(fp);
		deleteFile(output_file_path);
		procError(106);
		return 106;
    }
    correct_rate = (double)correct_answers_cnt / (double)question_num * 100;
    if (correct_rate != 0) {
    	/* 小数点以下を切り捨てるため */
    	correct_rate -= 0.5;
    }
    sprintf(result_detail_msg, "%d問中%d問正解しました。（正解率： %.0f%%）\n", question_num, correct_answers_cnt, correct_rate);
    printf("%s", result_detail_msg);
    if (fputs(result_detail_msg , fp) == EOF) {
    	// ファイル書き込みエラー
		fclose(fp);
		deleteFile(output_file_path);
		procError(106);
		return 106;
    }
    for (int j=0; j<i; j++) {
    	sprintf(question_no_str, "%s%d.", "Q", j+1);
    	sprintf(result_kaito_msg, "%-5s%s", question_no_str, correctness_ary[j]);
    	if (strcmp(correctness_ary[j], "×") == 0) {
    		/* 正解を文字列に付与 */
        	sprintf(result_kaito_msg, "%s 正解は%s\n", result_kaito_msg, h_answer[j]);
    	} else {
        	sprintf(result_kaito_msg, "%s\n", result_kaito_msg);
    	}
    	printf("%s", result_kaito_msg);
        if (fputs(result_kaito_msg , fp) == EOF) {
        	// ファイル書き込みエラー
    		fclose(fp);
    		deleteFile(output_file_path);
    		procError(106);
    		return 106;
        }
    }

    /* コミット */
    EXEC SQL COMMIT;

    /* ファイル名出力 */
    printf("「%s」というファイル名で出力されました。\n", output_file_name);

    /* バッファを出力する。 */
    fflush(fp);

    /* ファイルをクローズ */
    fclose(fp);

    /* ファイル転送処理 */
    /* ファイル転送不可能な場合は警告表示をし、処理をスキップ */
    if (existWinSCP() != 0) {
		/* 転送用ツールがない */
    	procWarning(3);
    	/* 処理スキップ扱いなので、正常終了 */
    	return 0;
    }
    if (existIconv() != 0) {
		/* 文字コード変換用ツールがない */
    	procWarning(4);
    	/* 処理スキップ扱いなので、正常終了 */
    	return 0;
    }

	/* 転送用ファイルの作成*/
	if (iconvFile(output_file_path, convert_file_path, "sjis", "UTF-8") != 0) {
		/* 文字エンコード失敗 */
		procWarning(4);
    	/* 処理スキップ扱いなので、正常終了 */
    	return 0;
	}

	/* ファイル転送 */
	strcpy(destination_file_path, DESTINATION_DIR);
	strcat(destination_file_path, output_file_name);
	if (putFile(output_file_path, destination_file_path) != 0) {
		/* 転送失敗 */
		procWarning(3);
    	/* 処理スキップ扱いなので、正常終了 */
		return 0;
	}

	/* ファイル転送まで成功したら、ファイルを削除する */
	deleteFile(output_file_path);
	deleteFile(convert_file_path);

    return 0;

errorpt:
    //printf("\n\n%-70s \n",sqlca.sqlerrm.sqlerrmc);

    /* 無限ループ回避 */
    EXEC SQL WHENEVER SQLERROR CONTINUE;
    /* ロールバック */
	EXEC SQL ROLLBACK;

	/* ファイルを開いている場合閉じる */
	if (fp != NULL) {
		fclose(fp);
	}

	/* ファイルが存在する場合は削除する */
	if (existFile(output_file_path) == 1) {
		deleteFile(output_file_path);
	}
	procError(255);
	return 255;
}

void setMsg() {
	strcpy(WARNING_MSG_LIST[1], "指定された数に対して問題数が不足しています。登録されている問題の数だけ出題されます。\n");
	strcpy(WARNING_MSG_LIST[2], "問題への回答は「A」「B」「C」「D」いずれかで入力してください。\n");
	strcpy(WARNING_MSG_LIST[3], "ファイル転送に失敗しました。ローカルでのみ保存されます。\n");
	strcpy(WARNING_MSG_LIST[4], "Linux用変換ファイルの作成に失敗しました。ローカルでのみ保存されます。\n");
	strcpy(WARNING_MSG_LIST[5], "名前は30文字以内で入力してください。\n");
	strcpy(ERROR_MSG_LIST[100], "引数が指定されていません。次のような形式で実行してください。 qa.exe [カテゴリ] [問題数]\n");
	strcpy(ERROR_MSG_LIST[101], "カテゴリの文字数が多すぎます。\n");
	strcpy(ERROR_MSG_LIST[102], "指定されたカテゴリは存在しません。\n");
	strcpy(ERROR_MSG_LIST[103], "問題数は半角数字で入力してください。\n");
	strcpy(ERROR_MSG_LIST[104], "問題数は1以上の値で入力してください。\n");
	strcpy(ERROR_MSG_LIST[105], "問題数は100以下の値で入力してください。\n");
	strcpy(ERROR_MSG_LIST[106], "ファイル書き込みに失敗しました。\n");
	strcpy(ERROR_MSG_LIST[107], "ファイルの転送に失敗しました。\n");
	strcpy(ERROR_MSG_LIST[255], "プログラムが異常終了しました。\n");
}

/**
 * 警告処理を行う。
 * @param warning_code: 警告コード
 */
void procWarning(int warning_code) {
	char *p, *msg[256];
	strcpy(msg, WARNING_MSG_LIST[warning_code]);
	/* PowerShell用のエスケープ文字を付与 */
	while ((p = strchr(msg, ' '))!=NULL) *p = '`';
	/* 警告メッセージを出力 */
	printf("[WARNING][%d]%s", warning_code, WARNING_MSG_LIST[warning_code]);
	/* イベント登録 */
	registerEvent("Warning", warning_code, msg);
}

/**
 * エラー処理を行う。
 * @param error_code: エラーコード
 */
void procError(int error_code) {
	char *p, *msg[256];
	strcpy(msg, ERROR_MSG_LIST[error_code]);
	/* PowerShell用のエスケープ文字を付与 */
	while ((p = strchr(msg, ' '))!=NULL) *p = '`';
	/* エラーメッセージを出力 */
	printf("[ERROR][%d]%s", error_code, ERROR_MSG_LIST[error_code]);
	/* イベント登録 */
	registerEvent("Error", error_code, msg);
}
